---
# Requires running: ansible-galaxy install rvm_io.rvm1-ruby
# To just rebuild: ansible-playbook --private-key=~/.vagrant.d/insecure_private_key -u vagrant -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory build.yml -t rebuild
- hosts: all
  become: true
  become_method: sudo
  vars:
    - yara_version: 1.7
    - geoip_version: 1.6.9
    - pcap_version: 1.8.1
    - curl_version: 7.52.1
    - glib2_dir: "2.50"
    - glib2_version: 2.50.2
    - node_version: 4.6.2
    - daq_version: 2.0.6
    - lua_version: 5.3.3
    - rvm1_rubies:
      - ruby-1.9.3
    - moloch_name: moloch
    - fpm_url: "http://molo.ch"
    - fpm_description: "Moloch Full Packet System"
    - iteration: 1

# Tasks before roles install software
  pre_tasks:
    - block:
        - name: ntop repo
          get_url: url=http://packages.ntop.org/centos-stable/ntop.repo dest=/etc/yum.repos.d/ntop.repo

        - name: epel repo
          yum: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ansible_distribution_major_version}}.noarch.rpm state=installed

        # On Centos 6 need to upgrade kernel so we get TPACKET_V3.  User doesn't have to have new kernel, but should
        - block:
          - name: remove old kernel headers
            yum: state=absent name=kernel-headers

          - name: install new kernel headers
            yum: state=present name={{item}}
            with_items:
              - "http://files.molo.ch/kernel-ml-headers-4.4.0-1.el6.elrepo.x86_64.rpm"
              - centos-release-scl

          - name: install devtoolset centos 6
            yum: state=present name=devtoolset-3-toolchain

          # TPACKET_V3 block end
          when: ansible_distribution_major_version == "6"
          tags: kernel

        - yum: name={{item}} state=installed
          with_items:
            - git
            - wget
            - curl
            - pcre
            - pcre-devel
            - pkgconfig
            - flex
            - bison
            - gcc
            - gcc-c++
            - zlib-devel
            - e2fsprogs-devel
            - openssl-devel
            - file-devel
            - make
            - gettext
            - libuuid-devel
            - perl-JSON
            - bzip2-libs
            - bzip2-devel
            - perl-libwww-perl
            - libpng-devel
            - xz
            - libffi-devel
            - libselinux-python
            - rpm-build
            - pfring

      # Block end
      when: ansible_distribution=='CentOS'


    - block:
        #- apt: deb=http://packages.ntop.org/apt-stable/{{ansible_distribution_version}}/all/apt-ntop-stable.deb
        - name: ntop deb
          apt: deb=http://apt-stable.ntop.org/{{ansible_distribution_version}}/all/apt-ntop-stable.deb

        - apt: update_cache=yes name={{item}} state=installed
          with_items:
            - git
            - wget
            - curl
            - libpcre3-dev
            - uuid-dev
            - libmagic-dev
            - pkg-config
            - gcc
            - g++
            - flex
            - bison
            - zlib1g-dev
            - libffi-dev
            - gettext
            - make
            - libjson-perl
            - libbz2-dev
            - libwww-perl
            - libpng-dev
            - xz-utils
            - libffi-dev
            - libssl-dev
            - pfring

      # Block end
      when: ansible_distribution == 'Ubuntu'

# Wackiness is happening where it doesn't always resolve and stuff
    - name: keys.gnupg.net hosts entry hack
      lineinfile: dest=/etc/hosts line="178.32.66.144 keys.gnupg.net"

# Install ruby
  roles:
    - {role: rvm_io.rvm1-ruby}

# Tasks after roles
  tasks:
    - name: install fpm
      gem: name=fpm user_install=no state=latest executable=/usr/local/bin/gem


# Prepare prereqs
    - name: Download Packages
      get_url: url={{item}} dest=. validate_certs=no
      with_items:
        - https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/yara-project/yara-{{yara_version}}.tar.gz
        - https://github.com/maxmind/geoip-api-c/releases/download/v{{geoip_version}}/GeoIP-{{geoip_version}}.tar.gz
        - http://www.tcpdump.org/release/libpcap-{{pcap_version}}.tar.gz
        - http://curl.haxx.se/download/curl-{{curl_version}}.tar.gz
        - http://ftp.gnome.org/pub/gnome/sources/glib/{{glib2_dir}}/glib-{{glib2_version}}.tar.xz
        - https://nodejs.org/download/release/v{{node_version}}/node-v{{node_version}}-linux-x64.tar.xz
        - https://www.snort.org/downloads/snort/daq-{{daq_version}}.tar.gz
        - https://www.lua.org/ftp/lua-{{lua_version}}.tar.gz

    - name: Unarchive Packages
      unarchive: src={{item}} dest=. copy=no
      with_items:
        - yara-{{yara_version}}.tar.gz
        - GeoIP-{{geoip_version}}.tar.gz
        - libpcap-{{pcap_version}}.tar.gz
        - curl-{{curl_version}}.tar.gz
        - glib-{{glib2_version}}.tar.xz
        - daq-{{daq_version}}.tar.gz
        - lua-{{lua_version}}.tar.gz

    - name: Check yara
      stat: path=yara-{{yara_version}}/libyara/.libs/libyara.a
      register: st

    - name: Build yara
      shell: cd yara-{{yara_version}}; ./configure --enable-static; make
      when: st.stat.exists == False

    - name: Check GeoIP
      stat: path=GeoIP-{{geoip_version}}/libGeoIP/.libs/libGeoIP.a
      register: st

    - name: Build GeoIP
      shell: cd GeoIP-{{geoip_version}}; ./configure --enable-static; make
      when: st.stat.exists == False

    - name: Check libpcap
      stat: path=libpcap-{{pcap_version}}/libpcap.a
      register: st

    - name: Build libpcap
      shell: cd libpcap-{{pcap_version}}; ./configure --disable-dbus --disable-usb --disable-canusb --disable-bluetooth --with-snf=no; make
      when: st.stat.exists == False

    - name: Check curl
      stat: path=curl-{{curl_version}}/lib/.libs/libcurl.a
      register: st

    - name: Build curl
      shell: cd curl-{{curl_version}}; ./configure --disable-ldap --disable-ldaps --without-libidn --without-librtmp; make
      when: st.stat.exists == False

    - name: Check glib2
      stat: path=glib-{{glib2_version}}/glib/.libs/libglib-2.0.a
      register: st

    - name: Build glib2
      shell: cd glib-{{glib2_version}}; ./configure --disable-xattr --disable-shared --enable-static --disable-libelf --disable-selinux --disable-libmount --with-pcre=internal; make
      when: st.stat.exists == False

    - name: Check daq
      stat: path=/usr/local/include/daq.h
      register: st

    - name: Build daq
      shell: cd daq-{{daq_version}}; ./configure --with-libpcap-includes=/home/vagrant/libpcap-{{pcap_version}}/ --with-libpcap-libraries=/home/vagrant/libpcap-{{pcap_version}}; make; make install
      when: st.stat.exists == False

    - name: Check lua
      stat: path=lua-{{lua_version}}/src/liblua.a
      register: st

    - name: Build lua
      shell: cd lua-{{lua_version}}; make MYCFLAGS=-fPIC linux
      when: st.stat.exists == False

# Only install snf if it exists locally.
    - name: Check for remote snf
      stat: path=/opt/snf
      register: remotesnf

    - name: Check for local snf
      become: false
      local_action: stat path=snf.tgz
      register: localsnf
      tags:
        - rebuild

    - name: unarchive snf
      unarchive: src=snf.tgz dest=/opt
      when: localsnf.stat.exists == True and remotesnf.stat.exists == False

    - name: rename snf
      command: mv /opt/myri_snf-3.0.9.50782_d4d3de8ea-3342.x86_64 /opt/snf
      when: localsnf.stat.exists == True and remotesnf.stat.exists == False

# Prepare build
    - name: Remove old dest directory
      file: dest=/data/{{moloch_name}} state=absent

    - name: Create dest directory
      file: dest=/data/{{moloch_name}}/{{item}} state=directory owner=nobody
      with_items:
        - etc
        - bin
        - logs

    - name: Create raw directory
      file: dest=/data/{{moloch_name}}/raw state=directory owner=nobody mode=0700

    - name: Unarchive node
      unarchive: src=~vagrant/node-v{{node_version}}-linux-x64.tar.xz dest=/data/{{moloch_name}} copy=no

    - name: node link
      file: state=link src=/data/{{moloch_name}}/node-v{{node_version}}-linux-x64/bin/{{item}} dest=/data/{{moloch_name}}/bin/{{item}}
      with_items:
        - node
        - npm

# Actually build 
    - block: 
      - name: git clone
        git: repo=https://github.com/aol/moloch dest={{moloch_name}} update=yes force=yes

      - name: configure
        shell: cd {{moloch_name}}; ./configure --with-libpcap=../libpcap-{{pcap_version}} --with-yara=../yara-{{yara_version}} --with-GeoIP=../GeoIP-{{geoip_version}} --with-curl=../curl-{{curl_version}} --with-glib2=../glib-{{glib2_version}} --with-lua=../lua-{{lua_version}} --prefix="/data/{{moloch_name}}"

      - name: clean build area
        shell: cd {{moloch_name}}; make clean

      - name: build
        shell: cd {{moloch_name}}; make

      - name: build pfring plugin
        shell: cd {{moloch_name}}/capture/plugins/pfring; make

      - name: build daq plugin
        shell: cd {{moloch_name}}/capture/plugins/daq; make

      - name: build lua plugin
        shell: cd {{moloch_name}}/capture/plugins/lua; make

      - name: build snf plugin
        shell: cd {{moloch_name}}/capture/plugins/snf; make
        when: localsnf.stat.exists == True

      - name: install centos 6
        shell: cd {{moloch_name}}; scl enable devtoolset-3 "make install"
        environment:
          PATH: "/data/{{moloch_name}}/bin:{{ansible_env.PATH}}"
        when: ansible_distribution_major_version == "6"

      - name: install not centos 6
        shell: cd {{moloch_name}}; make install
        environment:
          PATH: "/data/{{moloch_name}}/bin:{{ansible_env.PATH}}"
        when: ansible_distribution_major_version != "6"

      # Block End
      tags:
        - rebuild

    - name: copy sample config
      copy: src=../config.ini dest=/data/{{moloch_name}}/etc/config.ini.sample

    - name: copy upstart/systemd files
      copy: src="{{item}}" dest=/data/{{moloch_name}}/etc/
      with_items:
        - molochcapture.upstart.conf
        - molochviewer.upstart.conf
        - molochwise.upstart.conf
        - elasticsearch.upstart.conf
        - molochcapture.systemd.service
        - molochviewer.systemd.service
        - molochwise.systemd.service
        - elasticsearch.systemd.service
        - logging.demo.yml
        - elasticsearch.demo.yml

    - copy: src="README.txt" dest=/data/{{moloch_name}}/

    - name: helper scripts
      shell: sed -e "s/BUILD_MOLOCH_NAME/{{moloch_name}}/g" < {{moloch_name}}/release/{{item}} > /data/{{moloch_name}}/bin/{{item}}
      with_items:
        - moloch_update_geo.sh
        - moloch_add_user.sh
        - Configure

    - name: helper scripts chmod
      shell: chmod 0755 /data/{{moloch_name}}/bin/{{item}}
      with_items:
        - moloch_update_geo.sh
        - moloch_add_user.sh
        - Configure

    - set_fact:
        moloch_version: "stoperrors"

# CentOS package
    - block:
      - name: get moloch version
        shell: sed 's/.*\"\(.*\)\".*$/\1/' {{moloch_name}}/viewer/version.js | tr "-" "_"
        register: moloch_version_cmd_centos

      - set_fact:
          moloch_version: "{{moloch_version_cmd_centos.stdout}}"

      - name: fpm centos
        shell: bash -lc "{{item}}"
        with_items:
          - fpm -s dir -t rpm -n {{moloch_name}} -v {{moloch_version}} --iteration {{iteration}} --template-scripts --after-install "{{moloch_name}}/release/afterinstall.sh" --url \"{{fpm_url}}\" --description \"{{fpm_description}}\" -d perl-libwww-perl -d perl-JSON -d ethtool /data/{{moloch_name}}

      - name: copy centos back
        fetch: src={{moloch_name}}-{{moloch_version}}-{{iteration}}.x86_64.rpm dest=./builds
      # Block end
      when: ansible_distribution=='CentOS'
      tags: package

# Ubuntu package
    - block:
      - name: get moloch version
        shell: sed 's/.*\"\(.*\)\".*$/\1/' {{moloch_name}}/viewer/version.js
        register: moloch_version_cmd_ubuntu

      - set_fact:
          moloch_version: "{{moloch_version_cmd_ubuntu.stdout}}"

      - name: fpm ubuntu
        shell: bash -lc "{{item}}"
        with_items:
          - fpm -s dir -t deb -n {{moloch_name}} -v {{moloch_version}} --iteration {{iteration}} --template-scripts --after-install "{{moloch_name}}/release/afterinstall.sh" --url \"{{fpm_url}}\" --description \"{{fpm_description}}\" -d libwww-perl -d libjson-perl -d ethtool /data/{{moloch_name}}

      - name: copy ubuntu back
        fetch: src={{moloch_name}}_{{moloch_version}}-{{iteration}}_amd64.deb dest=./builds
      # Block end
      when: ansible_distribution=='Ubuntu'
      tags: package
